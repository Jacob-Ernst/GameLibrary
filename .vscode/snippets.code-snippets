{
	// Place your gamelibrary workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Model class structure": {
		"scope": "ruby",
		"prefix": "mcs",
		"body": [
			"# @internal Constants =====================================================",
			"",
			"# @internal Attributes ====================================================",
			"",
			"# @internal Extensions ====================================================",
			"",
			"# @internal Relationships =================================================",
			"",
			"# @internal Validations ===================================================",
			"",
			"# @internal Scopes ========================================================",
			"",
			"# @internal Callbacks =====================================================",
			"",
			"# @internal Class Methods =================================================",
			"",
			"# @internal Instance Methods =============================================="
		],
		"description": "gamelibrary model comments"
	},
	"Resource_Actions": {
		"scope": "ruby",
		"prefix": ["ra", "res"],
		"body": [
			"# @note GET /${1:records}",
			"def index; end",
			"",
			"# @note GET /${1:records}/new",
			"def new; end",
			"",
			"# @note POST /${1:records}",
			"def create; end",
			"",
			"# @note GET /${1:records}/:id",
			"def show; end",
			"",
			"# @note GET /${1:records}/:id/edit",
			"def edit; end",
			"",
			"# @note PUT|PATCH /${1:records}/:id",
			"def update; end",
			"",
			"# @note DELETE /${1:records}/:id",
			"def destroy; end",
		],
		"description": "Resource Actions"
	},
	"Sidekiq_Worker": {
		"scope": "ruby",
		"prefix": ["sw", "wor", "wr"],
		"body": [
			"class ${1:${TM_FILENAME_BASE/([a-zA-Z0-9]+)([-_]*)/${1:/capitalize}/g}}",
			"\tinclude Sidekiq::Worker",
			"",
			"\tdef perform(param)",
			"\t\t${2}",
			"\tend",
			"end"
		],
		"description": "Basic Sidekiq Worker"
	},
	"Base_Service": {
		"scope": "ruby",
		"prefix": ["ser", "bsr", "bsv"],
		"body": [
			"class ${1:${TM_FILENAME_BASE/([a-zA-Z0-9]+)([-_]*)/${1:/capitalize}/g}} < BaseService",
			"\tinclude Dry::Monads::Do.for(:execute)",
			"",
			"\tattr_reader :${2:params}",
			"",
			"\tdef initialize(${2:params})",
			"\t\t@${2:params} = ${2:params}",
			"\tend",
			"",
			"\tdef execute",
			"\t\t${3}",
			"\tend",
			"end"
		],
		"description": "Basic Sidekiq Worker"
	},
	"Result_Branch": {
		"scope": "ruby",
		"prefix": ["res", "resif", "ifres"],
		"body": [
			"if ${1:test}",
			"\tSuccess(${2})",
			"else",
			"\tFailure(${3})",
			"end"
		],
		"description": "dry-monad Result condition"
	},
}
